/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.dto.TransactionPutDTO;
import io.swagger.dto.TransactionsPageDTO;
import io.swagger.dto.TransactionPostDTO;
import io.swagger.exceptions.RestException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-06T12:37:01.770Z[GMT]")
@Validated
public interface TransactionApi {

    @Operation(summary = "Create a transaction", description = "Creates a transaction from one IBAN to another. Source iban needs to be from customer unless an employee creates the transaction", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers", "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully added a transaction"),
        @ApiResponse(responseCode = "400", description = "Bad request") })
    @RequestMapping(value = "/transaction",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createTransaction(@Parameter(in = ParameterIn.DEFAULT, description = "argument fields", required=true, schema=@Schema()) @Valid @RequestBody TransactionPostDTO body) throws RestException;


    @Operation(summary = "Delete a transaction", description = "Deletes the specified transaction. Undo's the money transfered to said account", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully deleted transaction") })
    @RequestMapping(value = "/transaction/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteTransaction(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Edit a transaction", description = "Edits a transaction based on the provided information in the json sent. Updates the money sent on both IBAN's", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully edited transaction"),
        @ApiResponse(responseCode = "400", description = "Bad request") })
    @RequestMapping(value = "/transaction/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Void> editTransaction(@Parameter(in = ParameterIn.PATH, description = "", required=true, schema=@Schema()) @PathVariable("id") Long id, @Parameter(in = ParameterIn.DEFAULT, description = "editable fields", schema=@Schema()) @Valid @RequestBody TransactionPutDTO body) throws RestException;


    @Operation(summary = "Get details of recent transactions", description = "Get details of transactions sorted by date returned as a JSON. Can take transaction ids, ibans, limit and page as filters. Customers can only query from ibans or ids they have access to. Employees can query any id or iban. When no filters are provided, Customers get all recent transactions done from ibans they have access to, Employees get all recent transactions", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers", "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully queried transaction", content = @Content(array = @ArraySchema(schema = @Schema(implementation = TransactionsPageDTO.class)))) })
    @RequestMapping(value = "/transaction",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<TransactionsPageDTO> getTransaction(@Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "id", required = false) List<Long> id, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema()) @Valid @RequestParam(value = "IBAN", required = false) List<String> IBAN, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="50")) @Valid @RequestParam(value = "limit", required = false, defaultValue="50") Integer limit, @Parameter(in = ParameterIn.QUERY, description = "" ,schema=@Schema( defaultValue="1")) @Valid @RequestParam(value = "page", required = false, defaultValue="1") Integer page);

}

