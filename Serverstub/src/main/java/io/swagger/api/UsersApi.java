/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.dto.CreateUserDTO;
import io.swagger.dto.CustomerEditUserDTO;
import io.swagger.dto.EmployeeEditUserDTO;
import io.swagger.dto.UsersPageDTO;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-06T12:37:01.770Z[GMT]")
@Validated
public interface UsersApi {

    @Operation(summary = "Create a new bank User", description = "The Employee can create a new User with the requested body.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Created User", content = @Content(schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized action"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<User> createUser(@Parameter(in = ParameterIn.DEFAULT, description = "The CreateUser object only has the fields required to create a User.", required=true, schema=@Schema()) @Valid @RequestBody CreateUserDTO newUser);


    @Operation(summary = "Delete a User by id", description = "The Employee can delete a User with the User Id.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User has been deleted"),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized action"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/users/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteUser(@Parameter(in = ParameterIn.PATH, description = "The user id", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Edit the User information", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Edited User", content = @Content(schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized action"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> editUser(@Parameter(in = ParameterIn.PATH, description = "The user id", required=true, schema=@Schema()) @PathVariable("id") Integer id, @Parameter(in = ParameterIn.DEFAULT, description = "The Employee can edit all User information.", required=true, schema=@Schema()) @Valid @RequestBody EmployeeEditUserDTO editUser);


    @Operation(summary = "Edit the User information", description = "", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Edited User", content = @Content(schema = @Schema(implementation = User.class))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> editUserCustomer(@Parameter(in = ParameterIn.DEFAULT, description = "The Employee can edit all User information.", required=true, schema=@Schema()) @Valid @RequestBody CustomerEditUserDTO editUser);


    @Operation(summary = "Get a single User", description = "Returns the following user information from the bank user, this can be a client or an employee; id, first name, last name, email, phone number, address, role, bankaccounts and limits.", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "User data", content = @Content(schema = @Schema(implementation = User.class))),
        
        @ApiResponse(responseCode = "400", description = "Invalid input"),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized action"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden") })
    @RequestMapping(value = "/users/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> getUser(@Parameter(in = ParameterIn.PATH, description = "The user id", required=true, schema=@Schema()) @PathVariable("id") Integer id);


    @Operation(summary = "Get a list of Users", description = "The Employee can get a list of all Users, the Customer gets their own account information", security = {
        @SecurityRequirement(name = "bearerAuth")    }, tags={ "Employees", "Customers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Array of all bank users", content = @Content(array = @ArraySchema(schema = @Schema(implementation = User.class)))) })
    @RequestMapping(value = "/users",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> getUsers(@Parameter(in = ParameterIn.QUERY, description = "page" ,schema=@Schema()) @Valid @RequestParam(value = "page", required = false) Integer offset, @Max(50) @Parameter(in = ParameterIn.QUERY, description = "limit" ,schema=@Schema(allowableValues={  }, maximum="50"
)) @Valid @RequestParam(value = "limit", required = false) Integer limit);

}

