openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NiekRoelofs/Project2.4G1/1.0.0
info:
  version: 1.0.0
  title: Bank
  description: 'Bank API for project 2.4'
paths: 
  /example:
    get:
      tags:
        - example
      summary: example
      operationId: example
      description: example
      responses:
        '200': 
          description: example
  /api/user/{id}: #id is needed for employee on GET, PUT and DELETE
    get:
      tags:
        - user
      summary: Get user information
      operationId: getUser
      description: Returns the following user information from the bank user, this can be a client or an employee; id, first name, last name, email,
                    phone number, address, role, bankaccounts and limits.
      responses: 
        '200':
          description: User data
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - user
      summary: Edit the user information
      operationId: editUser
      requestBody:
        description: The client can edit their email, phone number and address. The employee can edit all User information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Edited User
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    delete:
      tags:
        - user
      summary: Delete a User
      operationId: deleteUser
      responses:
        '200':
          description: User has been deleted
    post:
      tags:
        - user
      summary: Create a User
      operationId: createUser
      requestBody:
        description: The employee can create a User while entering all required fields.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Created User
          content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'

  /transaction:
    get:
      tags: [transactions]
      operationId: getTransaction
      summary: Get details of a transaction
      description: Get details of a transaction returned as a JSON. requires a transaction id
      responses:
        '200':
          description: Successfully queried transaction
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: "#/components/schemas/Transaction"  
                  
      parameters: 
        - in: query
          name: id
          schema:
            type: integer
          required: true
          
          
    post:
      tags: [transactions]
      operationId: makeTransaction
      summary: Create a transaction
      description: Creates a transaction from one IBAN to another. Source iban needs to be from customer unless an employee creates a transaction
      responses:
        '200':
          description: Successfully added a transaction
          
      parameters: 
        - in: query
          name: IBAN_from
          schema:
            type: string
          required: true
        - in: query
          name: IBAN_to
          schema:
            type: string
          required: true
        - in: query
          name: amount
          schema:
            type: number
          required: true

        
components:
  schemas:
    User:
      type: object
      required:
       - id
       - FirstName
       - LastName
       - Email
       - PhoneNumber
       - Address
       - Role
       - BankAccounts
       - Limits
      properties:
        id:
          type: integer
        FirstName: 
          type: string
        LastName:
          type: string
        Email:
          type: string
        PhoneNumber:
          type: string
        Address:
          $ref: '#/components/schemas/Address'
        Role:
          type: enum #check enum
        BankAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        Limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
    Address:
      type: object
      required:
       - street
       - houseNumber
       - postalcode
       - city
       - country
      properties:
        street:
          type: string
        houseNumber:
          type: integer
        postalcode:
          type: string
        city:
          type: string
        country:
          type: string
    BankAccount:
      type: object
      required:
       - name
       - id
       - accountType
       - IBAN
       - amount
      properties:
        name:
          type: string
        id:
          type: integer
        accountType:
          type: enum #check enum nog
        IBAN:
          type: string
        amount:
          type: number
    Limit:
      type: object
      required:
       - name
       - limit
       - current
      properties:
        name:
          type: string
        limit:
          type: number
        current:
          type: number

    Transaction:
      type: object
      required:
        - id
        - type 
        - timestamp
        - IBAN_from
        - IBAN_to
        - performed_by
        - amount
      properties:
        id:
          type: integer
          minimum: 0
          example: 10
        type:
          type: string
          enum: [Transaction, Deposit, Withdraw]
          example: "Transaction"
        timestamp:
          type: string
          format: date-time
          example: "2015-07-20T15:49:04-07:00"
        IBAN_from:
          type: string
          example: "IBAN01"
        IBAN_to:
          type: string
          example: "IBAN02"
        performed_by:
          type: object
          required: 
            - name
            - role
          properties:
            name:
              type: string
              example: "Owen"
            role:
              type: string
              enum: [Customer, Employee]
              example: "Customer"
        amount:
          type: number
          example: 10

