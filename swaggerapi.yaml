openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NiekRoelofs/Project2.4G1/1.0.0
info:
  version: 1.0.0
  title: Bank
  description: 'Bank API for project 2.4'
tags: 
  - name: Employees
    description: Operations for the employees
  - name: Customers
    description: Operations for the customers
  - name: Auth
    description: Authentication
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login
      operationId: login
      description: Verifies the user by login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
      responses:
        '200':
          description: Returns a token
          content:
            application/json:
              schema:
                type: string
                example: e.g. abc123-123abc-acb123
        '401':
          description: Failed to login
  /users/{id}: 
    get:
      tags:
        - Employees
      summary: Get user information
      operationId: getUser
      description: Returns the following user information from the bank user, this can be a client or an employee; id, first name, last name, email,
                    phone number, address, role, bankaccounts and limits.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user id
      responses: 
        '200':
          description: User data
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized action
        '403':
          description: Forbidden
    put:
      tags:
        - Employees
      summary: Edit the user information
      operationId: editUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user id
      requestBody:
        description: The Employee can edit all User information. 
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmployeeUserPut'
      responses:
        '200':
          description: Edited User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized action
        '403':
          description: Forbidden
    delete:
      tags:
        - Employees
      summary: Delete a User by id
      operationId: deleteUser
      description: The Employee can delete a User with the User Id.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: The user id
      responses:
        '200':
          description: User has been deleted
        '400':
          description: Invalid input
        '401':
          description: Unauthorized action
        '403':
          description: Forbidden
  /users:
    post:
      tags:
        - Employees
      summary: Create a new bank User
      operationId: createUser
      description: The Employee can create a new User with the requested body.
      requestBody:
        description: The CreateUser object only has the fields required to create a User.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '200':
          description: Created User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
        '401':
          description: Unauthorized action
        '403':
          description: Forbidden
    get:
      tags:
        - Employees
      summary: Get a list of Users
      operationId: getUsers
      description: The Employee can get a list of all Users
      responses:
        '200':
          description: Array of all bank users
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/User'
  /transaction:
    get:
      tags: [Customers, Employees]
      operationId: getTransaction
      summary: Get details of recent transactions
      description: Get details of transactions sorted by date returned as a JSON. Can take transaction ids, ibans, limit and page as filters. Customers can only query from ibans or ids they have access to. Employees can query any id or iban. When no filters are provided, Customers get all recent transactions done from ibans they have access to, Employees get all recent transactions
      responses:
        '200':
          description: Successfully queried transaction
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transaction"  
                  
      parameters: 
        - in: query
          name: id
          schema:
            type: array
            items:
              type: integer
          required: false
        - in: query
          name: IBAN
          schema:
            type: array
            items:
              type: string
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            default: 50
          required: false
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          required: false
          
          
    post:
      tags: [Customers, Employees]
      operationId: createTransaction
      summary: Create a transaction
      description: Creates a transaction from one IBAN to another. Source iban needs to be from customer unless an employee creates the transaction
      responses:
        '200':
          description: Successfully added a transaction

      requestBody:
        description: argument fields
        required: true
        content:
          application/json:
            schema:
              type: object
              required: 
                - IBAN_from
                - IBAN_to
                - amount
                
              properties:
                IBAN_from:
                  type: string
                  example: "IBAN01"
                IBAN_to:
                  type: string
                  example: "IBAN02"
                amount:
                  type: number
                  example: 10.50

  /transaction/{id}:
    put:
      tags: [Employees]
      operationId: editTransaction
      summary: Edit a transaction
      description: Edits a transaction based on the provided information in the json sent. Updates the money sent on both IBAN's
      responses:
        '200':
          description: Successfully edited transaction
          
      requestBody:
        description: editable fields
        content:
          application/json:
            schema:
              type: object
              items:
                $ref: "#/components/schemas/TransactionEdit"  
      
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
          
    delete:
      tags: [Employees]
      operationId: deleteTransaction
      summary: Delete a transaction
      description: Deletes the specified transaction. Undo's the money transfered to said account
      responses:
        '200':
          description: Successfully deleted transaction
      
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            example: 1
          required: true
                
  /Bankaccount/{IBAN}:
    get:
      tags:
        - Employees
        - Customers
      summary: Get bankaccount information
      operationId: getBankaccount
      description: Calling this allows you to get all your bankaccount information based on the id
      parameters:
        - name: IBAN
          in: path
          description: IBAN of bankaccount to return
          required: true
          schema:
            type: string
            example: NLxxINHO0xxxxxxxxx
      responses:
        '200':
          description: operation succesful
        '400':
          description: bad input parameter
        '404':
          description: bankaccount not found
    put:
      tags:
        - Employees
        - Customers
      summary: Updates a account
      operationId: updateBankaccount
      description: Calling this allows the employee to update a bankaccount
      parameters:
        - name: IBAN
          in: path
          description: IBAN of bankaccount to update
          required: true
          schema:
            type: string
            example: NLxxINHO0xxxxxxxxx
      responses:
        '200':
          description: operation succesful
        '400':
          description: bad input parameter
        '404':
          description: bankaccount not found
    delete:
      tags:
        - Employees
      summary: Delete a account
      operationId: deleteBankaccount
      description: Calling this allows the employee to delete a bankaccount
      parameters:
        - name: IBAN
          in: path
          description: IBAN of bankaccount to update
          required: true
          schema:
            type: string
            example: NLxxINHO0xxxxxxxxx
      responses:
        '200':
          description: operation succesful
        '400':
          description: bad input parameter
        '404':
          description: bankaccount not found
  /Bankaccount:
    post:
      tags:
        - Employees
      summary: create a bankaccount
      operationId: createBankaccount
      requestBody:
          description: Create a bankaccount, this option is employee only
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBankaccount'
      responses:
        '200':
          description: operation succesful
        '400':
          description: bad input parameter
    put:
      tags:
        - Employees
      summary: Completes withdraw or deposit
      operationId: completeMoneyFlow
      requestBody:
        description: Complete a deposit or withdraw as an employee
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepositOrWithdraw'
      responses:
        '200':
          description: operation succesful
        '400':
          description: bad input parameter
        '404':
          description: IBAN not found
        
components:
  schemas:
    Login:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "Username"
        password:
          type: string
          example: "Password"
    User:
      type: object
      required:
       - id
       - FirstName
       - LastName
       - Email
       - PhoneNumber
       - Address
       - Role
       - BankAccounts
       - Limits
      properties:
        id:
          type: integer
          example: 1
        FirstName: 
          type: string
          example: "James"
        LastName:
          type: string
          example: "Ford"
        Email:
          type: string
          example: "james@email.com"
        PhoneNumber:
          type: string
          example: "+31 6 12345678"
        Address:
          $ref: '#/components/schemas/Address'
        Role:
          type: string
          enum: [Customer, Employee]
          example: "Customer"
        BankAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        Limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
    Address:
      type: object
      required:
       - street
       - houseNumber
       - postalcode
       - city
       - country
      properties:
        street:
          type: string
          example: "Long Road"
        houseNumber:
          type: integer
          example: 10
        postalcode:
          type: string
          example: "1234AB"
        city:
          type: string
          example: "Big City"
        country:
          type: string
          example: "Wakanda"
    BankAccount:
      type: object
      required:
       - name
       - id
       - accountType
       - IBAN
       - amount
      properties:
        name:
          type: string
          example: "Daily Account"
        id:
          type: integer
          example: 1
        accountType:
          type: string
          enum: [Current, Savings]
          example: "Current"
        IBAN:
          type: string
          example: NL20RABO124235346
        amount:
          type: number
          example: 1200
    Limit:
      type: object
      required:
       - name
       - limit
       - current
      properties:
        name:
          type: string
          example: "AbsoluteLimit"
        limit:
          type: number
          example: 1000
        current:
          type: number
          example: 0
    CreateBankaccount:
      type: object
      required:
        - Type
      properties:
        Type:
          type: string
          enum: [Current, Savings]
          example: Current
    DepositOrWithdraw:
      type: object
      required:
        - IBAN
        - Type
        - Amount
      properties:
        IBAN:
          type: string
          example: NLxxINHO0xxxxxxxxx
        Type:
          type: string
          example: Current
        Amount:
          type: integer
          example: 2000
          minimum: 0
    Transaction:
      type: object
      required:
        - id
        - type 
        - timestamp
        - IBAN_from
        - IBAN_to
        - performed_by
        - amount
      properties:
        id:
          type: integer
          minimum: 0
          example: 10
        type:
          type: string
          enum: [Transaction, Deposit, Withdraw]
          example: "Transaction"
        timestamp:
          type: string
          format: date-time
          example: "2015-07-20T15:49:04-07:00"
        IBAN_from:
          type: string
          example: "IBAN01"
        IBAN_to:
          type: string
          example: "IBAN02"
        performed_by:
          type: object
          required: 
            - name
            - role
          properties:
            name:
              type: string
              example: "Owen"
            role:
              type: string
              enum: [Customer, Employee]
              example: "Customer"
        amount:
          type: number
          example: 10
    TransactionEdit:
      type: object
      properties:
        type:
          type: string
          enum: [Transaction, Deposit, Withdraw]
          example: "Transaction"
        IBAN_from:
          type: string
          example: "IBAN01"
        IBAN_to:
          type: string
          example: "IBAN02"
        performed_by:
          type: object
          required: 
            - name
            - role
          properties:
            name:
              type: string
              example: "Owen"
            role:
              type: string
              enum: [Customer, Employee]
              example: "Customer"
        amount:
          type: number
          example: 10
    CreateUser:
      type: object
      required:
        - FirstName
        - LastName
        - Email
        - PhoneNumber
        - Address
      properties:
        FirstName: 
          type: string
          example: "James"
        LastName:
          type: string
          example: "Ford"
        Email:
          type: string
          example: "james@email.com"
        PhoneNumber:
          type: string
          example: "+31 6 12345678"
        Address:
          $ref: '#/components/schemas/Address'
    EmployeeUserPut:
      type: object
      required:
       - FirstName
       - LastName
       - Email
       - PhoneNumber
       - Address
       - Role
       - BankAccounts
       - Limits
      properties:
        FirstName: 
          type: string
          example: "James"
        LastName:
          type: string
          example: "Ford"
        Email:
          type: string
          example: "james@email.com"
        PhoneNumber:
          type: string
          example: "+31 6 12345678"
        Address:
          $ref: '#/components/schemas/Address'
        Role:
          type: string
          enum: [Customer, Employee]
          example: "Customer"
        BankAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        Limits:
          type: array
          items:
            $ref: '#/components/schemas/Limit'
    CustomerUserPut:
      type: object
      required:
       - FirstName
       - LastName
       - Email
       - PhoneNumber
       - Address
      properties:
        FirstName: 
          type: string
          example: "James"
        LastName:
          type: string
          example: "Ford"
        Email:
          type: string
          example: "james@email.com"
        PhoneNumber:
          type: string
          example: "+31 6 12345678"
        Address:
          $ref: '#/components/schemas/Address'
